Scope of Variables and Constants
 
Any time a variable appears in program text, BASIC follows a set of rules
to determine which object is referred to by the variable. These rules
describe a variable's scope--the range of statements over which the
variable is defined.
 
You may think of variables and constants as having one of two scopes: global
or local.
 
  ю Global variables, once declared, may be used anywhere in a module
    to refer to some single object.
  ю Local variables are local to some part of the module (that is, the
    module-level code or one of the procedures).
 
In addition, variables can be shared in such a way that they aren't quite
global, nor are they completely local. This is done by using the SHARED
statement.

Scoping Rules
 
The following list summarizes BASIC's scope rules:
 
  ю A variable declared in a DIM, REDIM, or COMMON statement with the
    SHARED attribute is a global variable to a module. Any SUB or FUNCTION
    procedure within the module can refer to the variable.
 
  ю A symbolic constant is global if it is declared in a CONST statement in
    the module-level code. Symbolic constants declared in a SUB or FUNCTION
    are local.
 
  ю A variable is a local variable if it appears in a procedure and is not
    declared as a global variable. You can use the name of a global
    variable as a local variable in a procedure by declaring it in the
    procedure with the STATIC statement or by using it as a formal parameter.
 
  ю The SHARED statement lets you share a variable with the module-level
    code and other procedures with equivalent SHARED statements without
    making the variable a global variable.
 
  ю All variables in a DEF FN function are part of the module-level code
    unless they are explicitly made local in a STATIC statement or are
    formal parameters.
    
    Local Variables and Constants
 
A local variable or constant exists only within a procedure or the module-
level code. If the name of a local variable is used in another procedure in
a module, the name represents a different variable and refers to a
different object.
 
It is simplest to think of a local variable as any variable that isn't
global. Any variable that appears in module-level code or in a procedure is
local if it isn't declared in a DIM, REDIM, or COMMON statement with the
SHARED attribute. Even if a variable appears in one of these statements,
you may still use a local variable of the same name in a procedure by
declaring the variable in a STATIC statement.
 
Any symbolic constant declared inside a SUB or FUNCTION procedure is a local
constant. For example, in the following fragment, ENDOFLIST is a local
symbolic constant that exists only in the function FindElement:
 
  FUNCTION FindElement(X())
  CONST ENDOFLIST = -32767
  .
  .
  .
  END FUNCTION
 
Note: The STATIC statement not only declares a variable to be local, it also
      directs the compiler to save the value of the variable between
      procedure calls. Do not use STATIC statements in recursive procedures
      if you do not want a variable's value saved between calls.
      
      Sharing Variables
 
You can share variables among parts of a module without making the variables
global by using the SHARED statement. For example, to share TabStops
without making it a global variable, you would add SHARED statements to the
particular procedures you want to share the variable:
 
  DIM TabStops(MAXLINE)
  .
.
  .
  SUB SetTabPos STATIC
  SHARED TabStops()
  .
  .
  .
  END SUB
  FUNCTION ThisIsATab(LastColumn AS INTEGER) STATIC
  SHARED TabStops()
  .
  .
  .
  END FUNCTION
 
The SHARED statements indicate that the name TabStops in both procedures
refers to the same variable defined at the module level.
* * ** * * * *

Global Variables and Constants
 
Both variables and symbolic constants can be global in BASIC programs. A
global variable or global symbolic constant is defined for the entire
module.
 
  ю A symbolic constant is a global constant if it is declared in the
    module-level code using a CONST statement.
 
  ю For a variable, the only way to make it global is to declare it in the
    module-level code with the SHARED attribute in a DIM, REDIM, or COMMON
    statement. For example, the following program fragment makes TabStops a
    global variable.
 
      DIM SHARED TabStops(MAXLINE)
      .
      .
      .
      SUB SetTabPos STATIC
      .
      .
      .
      END SUB
      FUNCTION ThisIsATab(LastColumn AS INTEGER) STATIC
      .
      .
      .
 
The SHARED statement (as opposed to the SHARED attribute, used above) allows
particular procedures to share variables with the module-level code. This is
not the same as making the variable global. It is only global for the
module-level code and all procedures with SHARED statements for the variable.
* * ** * *
